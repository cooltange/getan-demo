<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd">

    <!-- Enable annotation configuration -->
    <context:annotation-config/>

    <!-- Scan sample packages for Spring annotations -->
    <context:component-scan base-package="org.apache.shiro.samples.sprhib.action"/>
    <context:component-scan base-package="org.apache.shiro.samples.sprhib.dao"/>
    <context:component-scan base-package="org.apache.shiro.samples.sprhib.security"/>
    <context:component-scan base-package="org.apache.shiro.samples.sprhib.service"/>

    <!-- Spring AOP auto-proxy creation (required to support Shiro annotations) -->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" 
    	depends-on="lifecycleBeanPostProcessor">
    	<property name="proxyTargetClass" value="true"/>
   	</bean>
   	
 	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>

	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />
		<property name="ignoreResourceNotFound" value="true" />
		<property name="locations">
			<list>
				<value>classpath:jdbc.properties</value>
			</list>
		</property>
	</bean>

    <!-- Sample RDBMS data source that would exist in any application.  Sample is just using an in-memory HSQLDB
         instance.  Change to your application's settings for a real app. -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="defaultAutoCommit" value="${jdbc.defaultAutoCommit}" />
	</bean>

    <!-- Hibernate SessionFactory -->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <!--<property name="schemaUpdate" value="true"/>-->
        <!-- Scan packages for JPA annotations -->
        <property name="packagesToScan" value="org.apache.shiro.samples.sprhib.model"/>
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">org.hibernate.dialect.H2Dialect</prop>
                <prop key="hibernate.jdbc.fetch_size">100</prop>
                <prop key="hibernate.cache.provider_class">net.sf.ehcache.hibernate.SingletonEhCacheProvider</prop>
            </props>
        </property>
        <property name="eventListeners">
            <map>
                <entry key="merge">
                    <bean class="org.springframework.orm.hibernate3.support.IdTransferringMergeEventListener"/>
                </entry>
            </map>
        </property>
    </bean>

    <!-- Transaction support beans -->
    <bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <tx:annotation-driven/>


    <!-- =========================================================
         Shiro Components
         ========================================================= -->

    <!-- Shiro's main business-tier object for web-enabled applications
         (use org.apache.shiro.web.mgt.DefaultWebSecurityManager instead when there is no web environment)-->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <!-- Single realm app (realm configured next, below).  If you have multiple realms, use the 'realms'
      property instead. -->
        <property name="realm" ref="sampleRealm"/>
        <!-- Uncomment this next property if you want heterogenous session access or clusterable/distributable
             sessions.  The default value is 'http' which uses the Servlet container's HttpSession as the underlying
             Session implementation.
        <property name="sessionMode" value="native"/> -->
    </bean>

    <!-- Post processor that automatically invokes init() and destroy() methods -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

    <!-- Define the Shiro Filter here (as a FactoryBean) instead of directly in web.xml -
         web.xml uses the DelegatingFilterProxy to access this bean.  This allows us
         to wire things with more control as well utilize nice Spring things such as
         PropertiesPlaceholderConfigurer and abstract beans or anything else we might need: -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <property name="loginUrl" value="/s/login.action"/>
        <property name="successUrl" value="/s/home.action"/>
        <property name="unauthorizedUrl" value="/unauthorized.action"/>
        <!-- The 'filters' property is usually not necessary unless performing an override, which we
             want to do here (make authc point to a PassthruAuthenticationFilter instead of the
             default FormAuthenticationFilter: -->
        <property name="filters">
            <util:map>
                <entry key="authc">
                    <bean class="org.apache.shiro.web.filter.authc.PassThruAuthenticationFilter"/>
                </entry>
            </util:map>
        </property>
        <property name="filterChainDefinitions">
            <value>
                /s/signup = anon
                /s/manageUsers = perms[user:manage]
                /s/** = authc
            </value>
        </property>
    </bean>
    
   	<!-- h2数据库服务器 -->
	<bean id="org.h2.tools.Server" class="org.h2.tools.Server"
		factory-method="createWebServer" init-method="start" destroy-method="stop">
		<constructor-arg value="-tcp,-tcpAllowOthers,-tcpPort,8043" />
	</bean>

   	<bean id="shiroInterceptor" class="org.apache.shiro.samples.sprhib.interceptor.ShiroInterceptor"></bean>

	<bean id="shiroAction" class="org.apache.shiro.samples.sprhib.action.ShiroAction"
		scope="prototype"/>
	<bean id="manageUsersAction" class="org.apache.shiro.samples.sprhib.action.ManageUsersAction"
		scope="prototype"/>
	
</beans>
